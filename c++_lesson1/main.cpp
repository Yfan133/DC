#include<iostream>
#include<assert.h>
#include<string.h>
using namespace std;
#pragma warning (disable:4996)
//template<class T>
//class Seqlist
//{
//public:
//	Seqlist(int capacity = 5)				//构造
//		:_base(new T[capacity])
//		, _capacity(capacity)
//		, _size(0)
//	{}
//	Seqlist(const Seqlist<T>& tmp)			//拷贝构造
//	{
//		_capacity = tmp._capacity;
//		_base = new T[_capacity];
//		for (int i = 0; i < tmp._size; i++)
//		{
//			_base[i] = tmp._base[i];
//		}
//		_size = tmp._size;
//	}		
//	~Seqlist();								//析构函数在类外定义
//	Seqlist<T>& operator=(const Seqlist<T>& tmp)	//赋值运算符重载
//	{}
//	T& operator[](int data)							//操作符[]重载，base[n]的函数
//	{
//		assert(data < _size);
//		return _base[data];
//	}
//	void SeqPush(const T data)						//尾插
//	{
//		_base[_size] = data;
//		_size++;
//	}
//	void SeqPopBack()
//	{
//		_size--;
//	}
//	int SeqSize()
//	{
//		return _size;
//	}
//private:
//	T* _base;
//	int _size;
//	int _capacity;
//};
//template<class T>
//Seqlist<T>::~Seqlist()	//在类外实现定义的函数，需要加模板参数列表
//{
//	if (_base)
//	{
//		delete[] _base;
//		_capacity = 0;
//		_size = 0;
//	}
//}
//int main()
//{
//	Seqlist<int> s1(10);
//	Seqlist<double>s2(10);
//	s1.SeqPush(1);
//	s1.SeqPush(2);
//	s1.SeqPush(2);
//	s1.SeqPush(2);
//	Seqlist<int> s3 = s1;
//	s2.SeqPush(1.0);
//	Seqlist<double>s4 = s2;
//	return 0;
//}

////传统版
//class String
//{
//public:
//	String(const char* ptr = "")					//构造，注意参数列表const char*，开辟的新空间strlen+1，strlen不会计算'\0'
//	{
//		if (ptr == nullptr)
//			ptr = "";
//		_str = new char[strlen(ptr) + 1];			
//		strcpy(_str, ptr);
//	}
//	String(const String& tmp)							//拷贝构造，const String&类型，初始化时开辟空间
//		:_str(new char[strlen(tmp._str)+1])
//	{
//		strcpy(_str, tmp._str);
//	}
//	~String()										//析构函数，先判空，不为空则释放空间，并防止野指针
//	{
//		if (_str)
//		{
//			delete[] _str;
//			_str = nullptr;
//		}
//	}
//String& operator=(const String& tmp)			//赋值运算符重载，返回类型String& 和参数列表const String&，为了防止内存泄露应该先释放旧空间，再开辟新空间
//{
//	if (*this != tmp)
//	{
//		delete[] _str;
//		_str = new char[strlen(tmp._str) + 1];
//		strcpy(_str, tmp._str);
//	}
//	return *this;
//}
//private:
//	char* _str;
//};
//现代法：
//class String
//{
//public:
//	String(const char* ptr = "");
//	String(const String& tmp);
//	~String();
//	String& operator=(String tmp)	//注意，这里是生成一份临时拷贝，然后交换指向，程序会自动调用析构函数释放临时对象
//	{
//		std::swap(_str, tmp._str);
//		return *this;
//	}
//private:
//	char* _str;
//};
//
//String::String(const char* ptr)		//注意，缺省参数列表只能放在声明的地方，定义的地方不能给缺省
//{
//	if (ptr == nullptr)
//		ptr = "";
//	_str = new char[strlen(ptr) + 1];
//	strcpy(_str, ptr);
//}
//String::String(const String& tmp)	//注意，应该初始化_str为nullptr，如果不这样做可能导致_str附上随机值(野指针)，交换给临时对象，在析构时产生段错误
//	:_str(nullptr)
//{
//	String ret(tmp._str);
//	std::swap(_str, ret._str);
//}
//String::~String()
//{
//	if (_str)
//	{
//		delete[] _str;
//		_str = nullptr;
//	}
//}
//int main()
//{
//	String s1("qwer");
//	String s2;
//	String s3(nullptr);
//	String s4(s1);
//	String s5(NULL);
//	s1 = s4;
//}

//模拟实现STL的string
//为什么重载运算符[]，要弄出一个const
namespace bit
{
	class string
	{
	public:
		string(const char* ptr = "")
		{
			if (ptr == nullptr)
				ptr = "";
			_str = new char[strlen(ptr) + 1];
			_size = 0;
			_capacity = 15;
		}
		string(const string& tmp)
			:_str(new char[strlen(tmp._str)+1])
			,_size(tmp._size)
			,_capacity(tmp._capacity)
		{

		}
		~string()
		{

		}

	private: 
		char* _str;
		size_t _size;
		size_t _capacity;
	};
}