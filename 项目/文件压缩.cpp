/*
文件压缩概念：
	在不丢失重要信息的前提下，按照一定算法对文件数据重新组织，减少数据冗余和存储空间，以提高文件传输效率和存储效率
无损压缩：
	压缩文件能够恢复到压缩前完全相同的格式，没有信息损失
有损压缩：
	对于一些人类不敏感数据(例如：图像和声波)，允许文件压缩过程中损失一定的信息。虽然不能完全恢复原始数据，但换取了大的多的压缩比。
常见压缩方式：
	1.将重复的字符用更短的内容进行替换：(LZ77压缩算法的实现)
		采用<长度，距离>键值对的方式，放在重复字符的地方，直接到前面去寻找
	2.用bit位代替字符：获得更短的结果
		1.固定长度编码：ABBB CCCC CDDD DDDD(四种字符四个状态)
			A:00  B:01  C:10 D：11
			压缩前：16字节
			压缩后：00010101 10101010 10111111 11111111 4字节
		2.利用哈夫曼树(变长编码)：按字符出现次数，将出现较多次的字符替换成较短比特位
			A:100 B:101 C:11 D:0
			压缩后：10010110 11011111 11111100 00000  3字节 + 5bit

GZIP压缩算法原理：
	1.先使用LZ77压缩算法对源文件进行第一次压缩，将重复语句压缩
	2.再使用哈夫曼编码再次进行压缩，得到结果

构造一棵哈夫曼树：
	特点：
		1.所有带权值的节点都是叶子节点

	方法：
		1.创建一个数组，数组的元素都是以权值为根节点的树(无左右孩子)，则数组就是是森林
		2.从数组中取最小的两个权值节点，构造一个二叉树，根节点为权值和。
		3.删除刚构造的两个节点，并插入新树。   重复构造，并删除
		4.最终数组中剩下一颗二叉树，哈夫曼树

哈夫曼树压缩原理：
	1.统计所有字符的出现次数，存放到一个数组中
	2.用数组构造堆
	3.构造哈夫曼树
*/

/*
哈夫曼树
	二叉树节点：
		左右子树
		构造：
			左右指针为空
	哈夫曼树
		重命名：节点类型
		构造：
			空树
		创建哈夫曼树：用一个数组
			小堆
*/

/* 新增：日志信息，打开文件失败。。。
哈夫曼树的节点类型是：结构体 CharInfo
	结构体：
		1.字符类型
		2.字符出现的频率(unsigned long long)
		3.对应编码(string)
	重载 +
		构造一个匿名对象并返回
	重载 > ：注意this对象要const修饰
		返回两个出现次数的大小

哈夫曼压缩
	1.用数组存储所有256个字符的结构体，供后续操作

	2.初始化字符数组

	3.压缩文件函数：(传入文件名)
		1.打开文件，注意判断是否成功打开
		2.读取，注意判断返回值，若返回值为0，则说明已经读完了




*/
// 256个字符，数据在文件中是以字节方式存储的，最大256